// Generated by AI, it works but idk how...

export const trimAudio = async (
  file: File,
  startTime: number,
  endTime: number,
): Promise<File> => {
  const audioContext = new AudioContext();
  const arrayBuffer = await file.arrayBuffer();
  const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);

  const sampleRate = audioBuffer.sampleRate;
  const startSample = Math.floor(startTime * sampleRate);
  const endSample = Math.floor(endTime * sampleRate);
  const trimmedAudioBuffer = audioContext.createBuffer(
    audioBuffer.numberOfChannels,
    endSample - startSample,
    sampleRate,
  );

  for (let i = 0; i < audioBuffer.numberOfChannels; i++) {
    const oldChannelData = audioBuffer.getChannelData(i);
    const newChannelData = trimmedAudioBuffer.getChannelData(i);
    newChannelData.set(oldChannelData.subarray(startSample, endSample));
  }

  // Convert to WAV and return as a file
  const wavBlob = await encodeWAV(trimmedAudioBuffer);
  return new File([wavBlob], `${file.name}.wav`, { type: "audio/wav" });
};

// Function to encode AudioBuffer to WAV
const encodeWAV = async (audioBuffer: AudioBuffer): Promise<Blob> => {
  const numOfChannels = audioBuffer.numberOfChannels;
  const sampleRate = audioBuffer.sampleRate;
  const length = audioBuffer.length * numOfChannels * 2 + 44;
  const buffer = new ArrayBuffer(length);
  const view = new DataView(buffer);

  // WAV header
  writeString(view, 0, "RIFF");
  view.setUint32(4, 36 + audioBuffer.length * numOfChannels * 2, true);
  writeString(view, 8, "WAVE");
  writeString(view, 12, "fmt ");
  view.setUint32(16, 16, true);
  view.setUint16(20, 1, true);
  view.setUint16(22, numOfChannels, true);
  view.setUint32(24, sampleRate, true);
  view.setUint32(28, sampleRate * numOfChannels * 2, true);
  view.setUint16(32, numOfChannels * 2, true);
  view.setUint16(34, 16, true);
  writeString(view, 36, "data");
  view.setUint32(40, audioBuffer.length * numOfChannels * 2, true);

  // Write audio data
  let offset = 44;
  for (let i = 0; i < audioBuffer.length; i++) {
    for (let channel = 0; channel < numOfChannels; channel++) {
      let sample = Math.max(
        -1,
        Math.min(1, audioBuffer.getChannelData(channel)[i] ?? 1),
      );
      sample = sample < 0 ? sample * 0x8000 : sample * 0x7fff;
      view.setInt16(offset, sample, true);
      offset += 2;
    }
  }

  return new Blob([view], { type: "audio/wav" });
};

// Helper function to write string data into the WAV file header
const writeString = (view: DataView, offset: number, string: string): void => {
  for (let i = 0; i < string.length; i++) {
    view.setUint8(offset + i, string.charCodeAt(i));
  }
};
