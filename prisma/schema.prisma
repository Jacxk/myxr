// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Sound {
    id          String       @id @default(cuid())
    name        String
    emoji       String
    url         String       @unique
    usegeCount  Int          @default(0)
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    createdById String
    deletedAt   DateTime?
    guildSounds GuildSound[]
    createdBy   User         @relation(fields: [createdById], references: [id])
    tags        Tag[]
    likedBy     LikedSound[]

    @@index([name])
}

model Tag {
    name   String  @id @unique
    sounds Sound[]
}

model Guild {
    id               String            @id
    name             String
    sounds           GuildSound[]
    soundMasterRoles String[]
    users            GuildMembership[]
}

model GuildSound {
    guildId        String
    soundId        String
    discordSoundId String @unique
    guild          Guild  @relation(fields: [guildId], references: [id])
    sound          Sound  @relation(fields: [soundId], references: [id])

    @@id([guildId, soundId])
}

model GuildMembership {
    userId  String
    user    User   @relation(fields: [userId], references: [id])
    guildId String
    guild   Guild  @relation(fields: [guildId], references: [id])

    @@id([userId, guildId])
    @@index([guildId])
}

enum Role {
    USER
    ADMIN
    PRO
}

// Necessary for Next auth
model Account {
    id                       String   @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?  @db.Text
    access_token             String?  @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?  @db.Text
    session_state            String?
    user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt                DateTime @default(now())
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String            @id @default(cuid())
    name          String?
    email         String?           @unique
    image         String?
    removed       Boolean           @default(false)
    emailVerified DateTime?
    updatedAt     DateTime          @updatedAt
    accounts      Account[]
    sessions      Session[]
    sounds        Sound[]
    guilds        GuildMembership[]
    role          Role              @default(USER)
    likedSounds   LikedSound[]

    @@index([name])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model LikedSound {
    userId  String
    soundId String
    user    User   @relation(fields: [userId], references: [id])
    sound   Sound  @relation(fields: [soundId], references: [id])

    @@id([userId, soundId])
}
